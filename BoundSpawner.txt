-- Github Sounds Credits to Chrono
local function Git(Link, Name)
local SoundName = tostring(Name)
local audioUrl = Link
local fileName = SoundName

-- Check if the audio file already exists
if not isfile(fileName..".mp3") then
    -- Download the audio file from GitHub using game:HttpGet() and write it to disk using writefile()
    local response = game:HttpGet(audioUrl)
        writefile(fileName..".mp3", response)
        print("Downloaded audio file from GitHub and saved as " .. fileName)
end
return (getcustomasset or getsynasset)(fileName..".mp3")
end

-- Model
local Modl = Instance.new("Model")
Modl.Name = "Rebound"
Modl.Parent = workspace

			local Eyes = Instance.new("Part", Modl)
			Eyes.Transparency = 1
               Modl.PrimaryPart = Eyes

			local Attachment = Instance.new("Attachment", Eyes)
               Attachment.Position = Attachment.Position+Vector3.new(0, 2.5, 0)

			local EyesParticle = Instance.new("ParticleEmitter", Attachment)
			EyesParticle.LightInfluence = 0
			EyesParticle.Brightness = 1.26
			EyesParticle.Size = NumberSequence.new({NumberSequenceKeypoint.new(0,5,0.12738800048828125),NumberSequenceKeypoint.new(0.12730099260807037,4.936309814453125,0.11947499960660934),NumberSequenceKeypoint.new(0.2561349868774414,5.0955400466918945,0.11133799701929092),NumberSequenceKeypoint.new(0.3803679943084717,4.936309814453125,0.10426600277423859),NumberSequenceKeypoint.new(0.49539899826049805,5.063690185546875,0.09643249958753586),NumberSequenceKeypoint.new(0.6042940020561218,5,0.09076060354709625),NumberSequenceKeypoint.new(0.6993860006332397,5.0955400466918945,0.08520050346851349),NumberSequenceKeypoint.new(0.7960119843482971,5,0.08048229664564133),NumberSequenceKeypoint.new(0.8987730145454407,5.127389907836914,0.07215149700641632),NumberSequenceKeypoint.new(1,5,0.06369449943304062)})

EyesParticle.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(0.11021800339221954,0,0),NumberSequenceKeypoint.new(0.2204360067844391,1,0),NumberSequenceKeypoint.new(0.31687700748443604,0,0),NumberSequenceKeypoint.new(0.4282430112361908,1,0),NumberSequenceKeypoint.new(0.5591269731521606,0,0),NumberSequenceKeypoint.new(0.6934559941291809,1,0),NumberSequenceKeypoint.new(0.8013780117034912,0,0),NumberSequenceKeypoint.new(1,1,0)})

EyesParticle.Transparency = NumberSequence.new{
				NumberSequenceKeypoint.new(0, .354),
				NumberSequenceKeypoint.new(0.496, .637),
				NumberSequenceKeypoint.new(1, 0),
			}

local squashKeypoints = {
	-- API: NumberSequenceKeypoint.new(time, size, envelop)
	NumberSequenceKeypoint.new(0, 0.5), -- At t=0, fully transparent
	NumberSequenceKeypoint.new(0.1, 0), -- At t=.1, fully opaque
	NumberSequenceKeypoint.new(0.5, 0.25), -- At t=.5, mostly opaque
	NumberSequenceKeypoint.new(1, 0.05), -- At t=1, fully transparent
}

			EyesParticle.Texture = "rbxassetid://13272951808"

			EyesParticle.Lifetime = NumberRange.new(0.1, 0.5)
			EyesParticle.Rate = 2500
			EyesParticle.Rotation = NumberRange.new(0, 0.1)
			EyesParticle.RotSpeed = NumberRange.new(-25,25)
			EyesParticle.Speed = NumberRange.new(5)
EyesParticle.ZOffset = 0
EyesParticle.Name = "Face1"
EyesParticle.Squash = NumberSequence.new(squashKeypoints)
EyesParticle.LightInfluence = 0.2
EyesParticle.LightEmission = 0.5
EyesParticle.Color = ColorSequence.new(Color3.fromRGB(160,206,255))
EyesParticle.VelocitySpread = 350
			EyesParticle.LockedToPart = true
			EyesParticle.VelocityInheritance = 2

			Eyes.Name = "Craft"

			Eyes.Anchored = true
			Eyes.CanCollide = false
			Eyes.Size = Vector3.new(20,20,5)

local ParticleEmitter = Instance.new("ParticleEmitter")
ParticleEmitter.Parent = Attachment

-- Set particle properties
ParticleEmitter.Texture = "rbxasset://textures/particles/smoke_main.dds" -- Replace with actual texture ID
ParticleEmitter.Lifetime = NumberRange.new(0.5, 4)
ParticleEmitter.Rate = 20000
ParticleEmitter.Speed = NumberRange.new(2, 3)
ParticleEmitter.VelocitySpread = 100
ParticleEmitter.Rotation = NumberRange.new(0, 360)
ParticleEmitter.RotSpeed = NumberRange.new(-50, 50)
ParticleEmitter.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 1),
    NumberSequenceKeypoint.new(1, 5)
})
ParticleEmitter.Color = ColorSequence.new(Color3.fromRGB(220,236,255))
ParticleEmitter.Transparency = NumberSequence.new{
				NumberSequenceKeypoint.new(0, .954),
				NumberSequenceKeypoint.new(0.496, .637),
				NumberSequenceKeypoint.new(1, 0.4),
			}
ParticleEmitter.ZOffset = -0.3
ParticleEmitter.LightInfluence = 0.1
ParticleEmitter.LightEmission = 0.1
ParticleEmitter.Name = "SmokyBBQ"

			local Spark = Instance.new("ParticleEmitter", Attachment)
			Spark.Texture = "rbxassetid://2581223252"
			Spark.Color = ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(3, 25, 99)),
				ColorSequenceKeypoint.new(0.324, Color3.fromRGB(220,236,252)),
				ColorSequenceKeypoint.new(0.441, Color3.fromRGB(35,76,171)),
				ColorSequenceKeypoint.new(0.527, Color3.fromRGB(1,208,255)),
				ColorSequenceKeypoint.new(0.675, Color3.fromRGB(3,120,252)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(191,254,254))
			}
			Spark.Size = NumberSequence.new(10)
			Spark.Transparency = NumberSequence.new{
				NumberSequenceKeypoint.new(0, .975),
				NumberSequenceKeypoint.new(0.247, 0.75),
				NumberSequenceKeypoint.new(0.498, .525),
				NumberSequenceKeypoint.new(0.786, .675),
				NumberSequenceKeypoint.new(1, 1),
			}

			Spark.Drag = 15
			Spark.LockedToPart = true
			Spark.VelocityInheritance = 0.5

			Spark.Lifetime = NumberRange.new(0.5, 2)
			Spark.Rate = 25
			Spark.Rotation = NumberRange.new(-50, 50)
			Spark.RotSpeed = NumberRange.new(-5, -5)
			Spark.Speed = NumberRange.new(1, 3)
			Spark.SpreadAngle = Vector2.new(180, 180)
            Spark.LightInfluence = 0.4
            Spark.ZOffset = -0.2
            Spark.LightEmission = 5
            Spark.Name = "Slungus"

			local Light2 = Instance.new("PointLight", Eyes)

			Light2.Brightness = 10
			Light2.Color = Color3.fromRGB(0,255,216)
			Light2.Enabled = true
			Light2.Range = 25
			Light2.Shadows = true
Light2.Name = "DaLight"
local entityModel = Modl
local mommy = entityModel.PrimaryPart
entityModel.PrimaryPart.CFrame = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value].RoomExit.CFrame
local spawn = Instance.new("Sound")
spawn.Parent = entityModel.PrimaryPart
spawn.Name = "ReboundSpawn"
spawn.SoundId = "rbxassetid://9114221327"
spawn.Volume = 5
spawn.RollOffMaxDistance = 10000
spawn.RollOffMinDistance = 450
spawn:Play()
    local move = Instance.new("Sound")
    move.SoundId = Git("https://github.com/check78/worldcuuuup/blob/main/DoomBegin.mp3?raw=true","Reboun")
    move.Parent = entityModel.PrimaryPart
    move.Name = "ReboundMoving"
    move.Volume = 0
    move.Looped = true
local vroom = game.TweenService:Create(move, TweenInfo.new(1),{Volume = 0.5})
    local distort = Instance.new("DistortionSoundEffect")
    distort.Level = 0.3
    distort.Parent = move
	move.RollOffMaxDistance = 2000
	move.RollOffMinDistance = 50
    local tree = Instance.new("TremoloSoundEffect")
    tree.Depth = 1
    tree.Duty = 1
    tree.Frequency = 5
    tree.Parent = move
    local eq = Instance.new("EqualizerSoundEffect")
    eq.HighGain = -60
    eq.MidGain = 10
    eq.LowGain = 10
    eq.Parent = move
    vroom:Play()
	move:Play()

-- Services

local Players = game:GetService("Players")
local ReSt = game:GetService("ReplicatedStorage")
local RS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local CG = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")

-- Variables

local Plr = Players.LocalPlayer
local Char = Plr.Character or Plr.CharacterAdded:Wait()
local Hum = Char:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera

local StaticRushSpeed = 60

local FindPartOnRayWithIgnoreList = workspace.FindPartOnRayWithIgnoreList
local WorldToViewportPoint = Camera.WorldToViewportPoint

local SelfModules = {
    DefaultConfig = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors%20Entity%20Spawner/DefaultConfig.lua"))(),
    Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}
local ModuleScripts = {
    ModuleEvents = require(ReSt.ClientModules.Module_Events),
    MainGame = require(Plr.PlayerGui.MainUI.Initiator.Main_Game),
}
local EntityConnections = {}

local Spawner = {}

-- Misc Functions

function onCharacterAdded(char)
    Char, Hum = char, char:WaitForChild("Humanoid")
end

function getPlayerRoot()
    return Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("Head")
end

function dragEntity(entityModel, pos, speed)
    local entityConnections = EntityConnections[entityModel]

    if entityConnections.movementNode then
        entityConnections.movementNode:Disconnect()
    end

    entityConnections.movementNode = RS.Stepped:Connect(function(_, step)
        if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
            local rootPos = entityModel.PrimaryPart.Position
            local diff = Vector3.new(pos.X, pos.Y, pos.Z) - rootPos

            if diff.Magnitude > 0.1 then
                entityModel:PivotTo(CFrame.new(rootPos + diff.Unit * math.min(step * speed, diff.Magnitude)))
            else
                entityConnections.movementNode:Disconnect()
            end
        end
    end)

    repeat task.wait(0.7) until not entityConnections.movementNode.Connected
end

function loadSound(soundData)
    local sound = Instance.new("Sound")
    local soundId = tostring(soundData[1])
    local properties = soundData[2]

    for i, v in next, properties do
        if i ~= "SoundId" and i ~= "Parent" then
            sound[i] = v
        end
    end

    if soundId:find("rbxasset://") then -- Custom audio
        sound.SoundId = soundId
    else
        local numberId = soundId:gsub("%D", "")

        sound.SoundId = "rbxassetid://".. numberId
    end
    
    sound.Parent = workspace

    return sound
end

-- Functions

Spawner.createEntity = function(config)
    for i, v in next, SelfModules.DefaultConfig do
        if config[i] == nil then
            config[i] = v
        end
    end

    config.Speed = StaticRushSpeed / 100 * config.Speed

    -- Model

    if typeof(entityModel) == "Instance" and entityModel.ClassName == "Model" then
        entityModel.PrimaryPart = entityModel.PrimaryPart or entityModel:FindFirstChildWhichIsA("BasePart")
        
        if entityModel.PrimaryPart then
            entityModel.PrimaryPart.Anchored = true
            
            if config.CustomName then
                entityModel.Name = config.CustomName
            end

            entityModel:SetAttribute("IsCustomEntity", true)
            entityModel:SetAttribute("NoAI", false)

            -- EntityTable

            local entityTable = {
                Model = entityModel,
                Config = config,
                Debug = {
                    OnEntitySpawned = function() end,
                    OnEntityDespawned = function() end,
                    OnEntityStartMoving = function() end,
                    OnEntityFinishedRebound = function() end,
                    OnEntityEnteredRoom = function() end,
                    OnLookAtEntity = function() end,
                    OnDeath = function() end
                }
            }

            return entityTable
        end
    end
end

Spawner.runEntity = function(entityTable)
    -- Nodes

    local nodes = {}

    for _, room in next, workspace.CurrentRooms:GetChildren() do
        local pathfindNodes = room:FindFirstChild("PathfindNodes")
            local fakeNode = Instance.new("Part")
            fakeNode.Name = "1"
            fakeNode.CFrame = room:WaitForChild("RoomExit").CFrame - Vector3.new(0, room.RoomExit.Size.Y / 2, 0)
        
        if pathfindNodes then
            pathfindNodes = {fakeNode}
        else

            pathfindNodes = {fakeNode}
        end

        table.sort(pathfindNodes, function(a, b)
            return tonumber(a.Name) < tonumber(b.Name)
        end)

        for _, node in next, pathfindNodes do
            nodes[#nodes + 1] = node
        end
    end

    -- Spawn

    local startNodeIndex = entityTable.Config.BackwardsMovement and #nodes or 1
    local startNodeOffset = entityTable.Config.BackwardsMovement and -50 or 50

    EntityConnections[entityModel] = {}
    local entityConnections = EntityConnections[entityModel]
    
    entityModel:PivotTo(nodes[startNodeIndex].CFrame * CFrame.new(0, 0, startNodeOffset) + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0))
    entityModel.Parent = workspace
    task.spawn(entityTable.Debug.OnEntitySpawned)

    -- Mute entity on spawn

    if CG:FindFirstChild("JumpscareGui") or (Plr.PlayerGui.MainUI.Death.HelpfulDialogue.Visible and not Plr.PlayerGui.MainUI.DeathPanelDead.Visible) then
        warn("on death screen, mute entity")

        for _, v in next, entityModel:GetDescendants() do
            if v.ClassName == "Sound" and v.Playing then
                v:Stop()
            end
        end
    end

    -- Flickering

    if entityTable.Config.FlickerLights[1] then
        ModuleScripts.ModuleEvents.flicker(workspace.CurrentRooms[ReSt.GameData.LatestRoom.Value], entityTable.Config.FlickerLights[2])
    end

    -- Movement

    task.wait(entityTable.Config.DelayTime)

-- Raycast
local player = game.Players.LocalPlayer
local Char = player.Character or player.CharacterAdded:Wait()
local distane = 100 -- replace with maximum distance

coroutine.wrap(function()
while entityModel ~= nil do
        local ray = Ray.new(player.Character.HumanoidRootPart.Position, (mommy.Position - player.Character.HumanoidRootPart.Position).unit * distane)
        local hitPart, hitPos, hitNormal = game.Workspace:FindPartOnRay(ray, player.Character, false, true)
        if hitPart == mommy then
            -- Part is directly in sight of the player, damage them
            -- You can replace this function with whatever damage function you want to use

if game.Players.LocalPlayer.Character:FindFirstChild("Crucifix") then
entityModel:Destroy()
game.Players.LocalPlayer.Character:FindFirstChild("Crucifix"):Destroy()
firesignal(game:GetService("ReplicatedStorage").EntityInfo.Caption.OnClientEvent, 'nocrucifixanim sorry',true)
return
end

            if not Char:GetAttribute("Hiding") then
if not Char:GetAttribute("IsDead") then
            ReSt.GameStats["Player_".. Plr.Name].Total.DeathCause.Value = Rebound
            game.Players.LocalPlayer.Character.Humanoid.Health = 0
            Char:SetAttribute("IsDead", true)
loadstring(game:HttpGet("https://raw.githubusercontent.com/check78/Jumpscares/main/BoundScare.txt"))()
end
end
        end
    
    task.wait(0.05)
end
end)()

    local enteredRooms = {}

    entityConnections.movementTick = RS.Stepped:Connect(function()
        if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
            local entityPos = entityModel.PrimaryPart.Position
            local rootPos = getPlayerRoot().Position
            local floorRay = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, Vector3.new(0, -10, 0)), {entityModel, Char})
            local playerInSight = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, rootPos - entityPos), {entityModel, Char}) == nil
            
            -- Entered room

            if floorRay ~= nil and floorRay.Name == "Floor" then
                for _, room in next, workspace.CurrentRooms:GetChildren() do
                    if floorRay:IsDescendantOf(room) and not table.find(enteredRooms, room) then
                        enteredRooms[#enteredRooms + 1] = room
                        task.spawn(entityTable.Debug.OnEntityEnteredRoom, room)

                        -- Break lights
                        
                        if entityTable.Config.BreakLights then
                            ModuleScripts.ModuleEvents.shatter(room)
                        end

                        break
                    end
                end
            end

            -- Camera shaking
            
            local shakeConfig = entityTable.Config.CamShake
            local shakeMag = (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude

            if shakeConfig[1] and shakeMag <= shakeConfig[3] then
                local shakeRep = {}

                for i, v in next, shakeConfig[2] do
                    shakeRep[i] = v
                end
                shakeRep[1] = shakeConfig[2][1] / shakeConfig[3] * (shakeConfig[3] - shakeMag)

                ModuleScripts.MainGame.camShaker.ShakeOnce(ModuleScripts.MainGame.camShaker, table.unpack(shakeRep))
            end

            -- Player in sight

            if playerInSight then
                -- Look at entity

                local _, onScreen = WorldToViewportPoint(Camera, entityModel.PrimaryPart.Position)

                if onScreen then
                    task.spawn(entityTable.Debug.OnLookAtEntity)
                end

                -- Kill player

                if entityTable.Config.CanKill and not Char:GetAttribute("IsDead") and not Char:GetAttribute("Invincible") and not Char:GetAttribute("Hiding") and (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude <= entityTable.Config.KillRange then
                    task.spawn(function()
if workspace.Ambience_FigureEnd.Playing or workspace.Ambience_FigureStart.Playing or workspace.Ambience_Figure.Playing or workspace.Ambience_Seek.Playing or workspace:FindFirstChild("Blink") or workspace:FindFirstChild("SeekMoving") then
return
end
                        Char:SetAttribute("IsDead", true)

                        -- Mute entity

                        warn("mute entity")

                        for _, v in next, entityModel:GetDescendants() do
                            if v.ClassName == "Sound" and v.Playing then
                                v:Stop()
                            end
                        end

                        -- Jumpscare
                        
                        if entityTable.Config.Jumpscare[1] then
                            Spawner.runJumpscare(entityTable.Config.Jumpscare[2])
                        end

                        -- Death handling
                        
                        task.spawn(entityTable.Debug.OnDeath)
                        Hum.Health = 0
                        ReSt.GameStats["Player_".. Plr.Name].Total.DeathCause.Value = Rebound
                        
                        if #entityTable.Config.CustomDialog > 0 then
                            firesignal(ReSt.Bricks.DeathHint.OnClientEvent, entityTable.Config.CustomDialog)
                        end
                        
                        -- Unmute entity

                        task.spawn(function()
                            repeat task.wait() until Plr.PlayerGui.MainUI.DeathPanelDead.Visible

                            warn("unmute entity:", entityModel)

                            for _, v in next, entityModel:GetDescendants() do
                                if v.ClassName == "Sound" then
                                    local oldVolume = v.Volume
                                
                                    v.Volume = 0
                                    v:Play()
                                    TS:Create(v, TweenInfo.new(2), {Volume = oldVolume}):Play()
                                end
                            end
                        end)
                    end)
                end
            end
        end
    end)

    task.spawn(entityTable.Debug.OnEntityStartMoving)

    -- Cycles

    local cyclesConfig = entityTable.Config.Cycles

    if entityTable.Config.BackwardsMovement then
        local inverseNodes = {}

        for nodeIdx = #nodes, 1, -1 do
            inverseNodes[#inverseNodes + 1] = nodes[nodeIdx]
        end

        nodes = inverseNodes
    end

    for cycle = 1, math.max(math.random(cyclesConfig.Min, cyclesConfig.Max), 1) do
        for nodeIdx = 1, #nodes, 1 do
            dragEntity(entityModel, nodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
        end

        if cyclesConfig.Max > 1 then
            for nodeIdx = #nodes, 1, -1 do
                dragEntity(entityModel, nodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
            end
        end

        -- Rebound finished

        task.spawn(entityTable.Debug.OnEntityFinishedRebound)
        
        if cycle < cyclesConfig.Max then
            task.wait(cyclesConfig.WaitTime)
        end
    end

    -- Destroy

    if not entityModel:GetAttribute("NoAI") then
        for _, v in next, entityConnections do
            v:Disconnect()
        end
        
        task.spawn(entityTable.Debug.OnEntityDespawned)
        entityModel.PrimaryPart.Anchored = false
        entityModel.PrimaryPart.CanCollide = false
        wait(6)
        entityModel:Destroy()
    end
end

Spawner.runJumpscare = function(config)
    -- Variables

    local image1 = LoadCustomAsset(config.Image1)
    local image2 = LoadCustomAsset(config.Image2)
    local sound1, sound2 = nil, nil

    if config.Sound1 then
        sound1 = loadSound(config.Sound1)
    end

    if config.Sound2 then
        sound2 = loadSound(config.Sound2)
    end

    -- UI Construction

    local JumpscareGui = Instance.new("ScreenGui")
    local Background = Instance.new("Frame")
    local Face = Instance.new("ImageLabel")

    JumpscareGui.Name = "JumpscareGui"
    JumpscareGui.IgnoreGuiInset = true
    JumpscareGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Background.Name = "Background"
    Background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Background.BorderSizePixel = 0
    Background.Size = UDim2.new(1, 0, 1, 0)
    Background.ZIndex = 999

    Face.Name = "Face"
    Face.AnchorPoint = Vector2.new(0.5, 0.5)
    Face.BackgroundTransparency = 1
    Face.Position = UDim2.new(0.5, 0, 0.5, 0)
    Face.ResampleMode = Enum.ResamplerMode.Pixelated
    Face.Size = UDim2.new(0, 150, 0, 150)
    Face.Image = image1

    Face.Parent = Background
    Background.Parent = JumpscareGui
    JumpscareGui.Parent = CG
    
    -- Tease

    local teaseConfig = config.Tease
    local absHeight = JumpscareGui.AbsoluteSize.Y
    local minTeaseSize = absHeight / 5
    local maxTeaseSize = absHeight / 2.5

    if teaseConfig[1] then
        local teaseAmount = math.random(teaseConfig.Min, teaseConfig.Max)

        sound1:Play()
        
        for _ = teaseConfig.Min, teaseAmount do
            task.wait(math.random(100, 200) / 100)

            local growFactor = (maxTeaseSize - minTeaseSize) / teaseAmount
            Face.Size = UDim2.new(0, Face.AbsoluteSize.X + growFactor, 0, Face.AbsoluteSize.Y + growFactor)
        end

        task.wait(math.random(100, 200) / 100)
    end
    
    -- Flashing

    if config.Flashing[1] then
        task.spawn(function()
            while JumpscareGui.Parent do
                Background.BackgroundColor3 = config.Flashing[2]
                task.wait(math.random(25, 100) / 1000)
                Background.BackgroundColor3 = Color3.new(0, 0, 0)
                task.wait(math.random(25, 100) / 1000)
            end
        end)
    end
    
    -- Shaking

    if config.Shake then
        task.spawn(function()
            local origin = Face.Position

            while JumpscareGui.Parent do
                Face.Position = origin + UDim2.new(0, math.random(-10, 10), 0, math.random(-10, 10))
                Face.Rotation = math.random(-5, 5)

                task.wait()
            end
        end)
    end

    -- Jumpscare
    
    Face.Image = image2
    Face.Size = UDim2.new(0, maxTeaseSize, 0, maxTeaseSize)
    sound2:Play()
    
    TS:Create(Face, TweenInfo.new(0.75), {Size = UDim2.new(0, absHeight * 3, 0,  absHeight * 3), ImageTransparency = 0.5}):Play()
    task.wait(0.75)
    JumpscareGui:Destroy()
    
    if sound1 then
        sound1:Destroy()
    end
    
    if sound2 then
        sound2:Destroy()
    end
end

-- Scripts

Plr.CharacterAdded:Connect(onCharacterAdded)

if not SpawnerSetup then
    getgenv().SpawnerSetup = true

    workspace.DescendantRemoving:Connect(function(des)
        if des.Name == "PathfindNodes" then
            des:Clone().Parent = des.Parent
        end
    end)
end

return Spawner